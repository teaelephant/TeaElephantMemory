scalar Date

type Query {
    "Get information about teas."
    teas(prefix: String): [Tea!]!
    "Get information about tea by id."
    tea(id: ID!): Tea
    "Get tea meta information by qr code"
    qrRecord(id: ID!): QRRecord
    "Get tag by id."
    tag(id: ID!): Tag
    "Get categories of tags"
    tagsCategories(name: String): [TagCategory!]!
    "Collection of teas, authorization required"
    collections(token: String!): [Collection!]!

    getTeas(prefix: String): [Tea!]! @deprecated(reason: "Use teas instead")
    getTea(id: ID!): Tea @deprecated(reason: "Use tea instead")
    getQrRecord(id: ID!): QRRecord @deprecated(reason: "Use qrRecord instead")
    getTags(name: String, category: ID): [Tag!]! @deprecated(reason: "Use tagsCategories instead")
    getTagsCategories(name: String): [TagCategory!]! @deprecated(reason: "Use tagsCategories instead")
    getTag(id: ID!): Tag @deprecated(reason: "Use tag instead")
}

type Mutation {
    newTea(tea: TeaData!): Tea!
    updateTea(id: ID!, tea: TeaData!): Tea!
    addTagToTea(teaID: ID!, tagID: ID!): Tea!
    deleteTagFromTea(teaID: ID!, tagID: ID!): Tea!
    deleteTea(id: ID!): ID!
    writeToQR(id: ID!, data: QRRecordData!): QRRecord!
    createTagCategory(name: String!): TagCategory!
    updateTagCategory(id: ID!, name: String!): TagCategory!
    deleteTagCategory(id:ID!): ID!
    createTag(name: String!, color: String!, category: ID!): Tag!
    updateTag(id: ID!, name: String!, color: String!): Tag!
    changeTagCategory(id: ID!, category: ID!): Tag!
    deleteTag(id: ID!): ID!
    createCollection(token: String!, name: String!): Collection!
    addRecordsToCollection(id: ID!, records: [ID!]!, token: String!): Collection!
    deleteRecordsFromCollection(id: ID!, records: [ID!]!, token: String!): Collection!
    deleteCollection(token: String!, id: ID!): ID!
}

type Subscription {
    onCreateTea: Tea!
    onUpdateTea: Tea!
    onDeleteTea: ID!
    onCreateTagCategory: TagCategory!
    onUpdateTagCategory: TagCategory!
    onDeleteTagCategory: ID!
    onCreateTag: Tag!
    onUpdateTag: Tag!
    onDeleteTag: ID!
    onAddTagToTea: Tea!
    onDeleteTagFromTea: Tea!
}

type TagCategory {
    id: ID!
    name: String!
    tags(name: String): [Tag!]!
}

type QRRecord {
    id: ID!
    tea: Tea!
    bowlingTemp: Int!
    expirationDate: Date!
}

input QRRecordData {
    tea: ID!
    bowlingTemp: Int!
    expirationDate: Date!
}

type Tea {
    id: ID!
    name: String!
    type: Type!
    description: String!
    tags: [Tag!]!
}

input TeaData {
    name: String!
    type: Type!
    description: String!
}

type Tag {
    id: ID!
    name: String!
    color: String!
    category: TagCategory!
}

enum Type {
    unknown
    tea
    coffee
    herb
    other
}

type Collection {
    id: ID!
    name: String!
    userID: ID!
    records: [QRRecord!]!
}