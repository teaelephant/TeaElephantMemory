apiVersion: v1
kind: Namespace
metadata:
  name: teaelephant
  labels:
    name: teaelephant

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teaelephant
  name: server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      name: server
      labels:
        app: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: server
          image: ghcr.io/teaelephant/teaelephantmemory:v1.3.2
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 3
          env:
            - name: LOG_LEVEL
              value: debug
            - name: DATABASEPATH
              value: "/etc/fdb/fdb.cluster"
            - name: OPEN_AI_TOKEN
              valueFrom:
                secretKeyRef:
                  name: openai-token
                  key: token
            - name: OPENWEATHER_APIKEY
              valueFrom:
                secretKeyRef:
                  name: openweather-apikey
                  key: apikey
            - name: APPLE_AUTH_CLIENT_ID
              value: "xax.TeaElephant"
            - name: APPLE_AUTH_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: keyid
                  name: apple-auth
            - name: APPLE_AUTH_TEAM_ID
              valueFrom:
                secretKeyRef:
                  key: teamid
                  name: apple-auth
            - name: APPLE_AUTH_SECRET_PATH
              value: "/keys/AuthKey_39D5B439QV.p8"
          volumeMounts:
            - name: db-cluster
              mountPath: /etc/fdb/
            - name: keys
              mountPath: /keys/
      volumes:
        - name: db-cluster
          configMap:
            name: fdb.cluster
        - name: keys
          secret:
            secretName: apple-auth
      imagePullSecrets:
        - name: regcred
---
kind: Service
apiVersion: v1
metadata:
  name: server
  namespace: teaelephant
  labels:
    app: server
spec:
  selector:
    app: server
  ports:
    - name: web
      port: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: server-public
  namespace: teaelephant
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: server
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: server
  labels:
    team: backend
spec:
  selector:
    matchLabels:
      app: server
  endpoints:
    - port: web
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: server
  namespace: teaelephant
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - tea-elephant.com
      secretName: hello-kubernetes-tls
  ingressClassName: nginx
  rules:
    - host: tea-elephant.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: server-public
                port:
                  number: 80
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: teaelephant
spec:
  acme:
    # Email address used for ACME registration
    email: lueurxax@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Name of a secret used to store the ACME account private key
      name: letsencrypt-prod-private-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
      - http01:
          ingress:
            class: nginx